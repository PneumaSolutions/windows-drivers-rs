extend = "./crates/wdk-build/rust-driver-makefile.toml"

[config]
min_version = "0.37.13"
additional_profiles = ["all-default-tasks"]

[env]
CARGO_MAKE_SKIP_SLOW_SECONDARY_FLOWS = false
CARGO_MAKE_CLIPPY_ARGS = "--all-targets -- -D warnings"
RUSTFLAGS = "-D warnings"
CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN = "stable"
RUSTDOCFLAGS = "-D warnings"

[tasks.wdk-pre-commit-flow]
description = "Run pre-commit tasks and checks"
category = "Development"
workspace = false
dependencies = [
  "format-flow",
  "format-toml-conditioned-flow",
  "wdk-build-flow",
  "wdk-samples-flow",
  "test-flow",
  "clippy-flow",
  "audit-flow",
  "unused-dependencies-flow",
  "docs",
  "nightly-test-flow",
  "nightly-clippy-flow",
  "nightly-docs",
  "beta-test-flow",
  "beta-clippy-flow",
  "beta-docs",
]

# TODO: ALL the non-build tasks need to run with the different configurations
# TODO: ALL these tasks need to be ported to the pipeline

[tasks.format]
toolchain = "nightly"

[tasks.wdk-build-flow]
description = "Builds the WDR repo in several different configurations"
workspace = false
script = '''
#!@duckscript

exec --fail-on-error cargo make --no-workspace build
exec --fail-on-error cargo make --no-workspace build --features _test-kmdf
exec --fail-on-error cargo make --no-workspace build --features _test-umdf
exec --fail-on-error cargo make --no-workspace build --features _test-wdm
'''

[tasks.wdk-samples-flow]
description = "Builds and packages the drivers in the sample-drivers folder"
category = "Development"
workspace = false
cwd = "./sample-drivers"
# Use script instead of run_task to pass on `cwd` to the task
script = '''
#!@duckscript

exec --fail-on-error cargo make package-driver-flow
'''

[tasks.pre-test]
# macrotest and trybuild tests will fail when switching between nightly and stable toolchains due to trybuild/macrotest caching artifacts built with the other toolchain. Deleting the tests directory is enough to purge all test artifacts created by trybuild/macrotest.
script = '''
#!@duckscript
success = rm -r ${CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY}/tests
assert ${success} "Failed to delete tests directory"
'''

[tasks.test]
install_crate = { crate_name = "cargo-expand", binary = "cargo", test_arg = [
  "expand",
  "--version",
], version = "1.0.85" }

[tasks.audit]
args = ["audit", "--deny", "warnings"]

[tasks.unused-dependencies]
workspace = false
condition = { env_true = ["CARGO_MAKE_CRATE_HAS_DEPENDENCIES"] }
args = ["machete", "--skip-target-dir"]

[tasks.pre-clippy]
workspace = false
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! walkdir = "2.5.0"
//! ```
#![allow(unused_doc_comments)]

use walkdir::WalkDir;
use std::{fs, io::Write, path::Path};

// Create `clippy_workspace` folder in the target directory
let cargo_make_target_dir = std::env::var("CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY").expect("CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY should be set by cargo-make");
let target_dir = Path::new(&cargo_make_target_dir);
let clippy_workspace_folder_path = target_dir.join("clippy_workspace");
if !clippy_workspace_folder_path.exists() {
    std::fs::create_dir(&clippy_workspace_folder_path)?;
}

// Copy all files from `crates` folder to `clippy_workspace` folder
for entry in WalkDir::new("./crates").into_iter()
        .filter_map(Result::ok)
        .filter(|e| e.file_type().is_file()) {
    let path_to_copy = entry.path();
    let destination_path = clippy_workspace_folder_path.join(path_to_copy);

    fs::create_dir_all(&destination_path.parent().unwrap_or_else(|| panic!("{} should have a valid parent", destination_path.display()))).unwrap_or_else(|e| panic!("Failed to create parent directories for {}: {e}", destination_path.display()));
    fs::copy(path_to_copy, &destination_path).unwrap_or_else(|e| panic!("File should succeed to be copied from {} to {}: {e}", path_to_copy.display(), destination_path.display()));
}

// Copy workspace Cargo manifest and inject workspace WDK metadata
let workspace_manifest_path = Path::new("./Cargo.toml");
let destination_path = clippy_workspace_folder_path.join("Cargo.toml");
fs::copy(workspace_manifest_path, &destination_path).unwrap_or_else(|e| panic!("File should succeed to be copied from {} to {}: {e}", workspace_manifest_path.display(), destination_path.display()));
let mut clippy_workspace_manifest_file = fs::OpenOptions::new().append(true).open(&destination_path).unwrap_or_else(|e| panic!("Failed to open file {}: {e}", destination_path.display()));
clippy_workspace_manifest_file.write_all(br#"
[workspace.metadata.wdk.driver-model]
driver-type = "KMDF"
kmdf-version-major = 1
target-kmdf-version-minor = 33
"#).unwrap_or_else(|e| panic!("Failed to write to file {}: {e}", destination_path.display()));
'''

[tasks.nightly-test-flow]
extend = "test-flow"
dependencies = ["pre-nightly-test", "nightly-test", "post-nightly-test"]

[tasks.pre-nightly-test]
alias = "pre-test"

[tasks.nightly-test]
extend = "test"
env = { CARGO_MAKE_CARGO_BUILD_TEST_FLAGS = "--features nightly" }
toolchain = "nightly"

[tasks.post-nightly-test]
extend = "post-test"
env = { CARGO_MAKE_CARGO_BUILD_TEST_FLAGS = { unset = true } }

[tasks.nightly-clippy-flow]
extend = "clippy-flow"
dependencies = [
  "pre-nightly-clippy",
  "nightly-clippy-router",
  "post-nightly-clippy",
]

[tasks.pre-nightly-clippy]
extend = "pre-clippy"
# Proc-macro crates fail to trigger recompilation when switching toolchains due to bug in rustc resulting in "found invalid metadata files for crate" errors.
run_task = "clean"

[tasks.nightly-clippy-router]
extend = "clippy-router"
env = { CARGO_MAKE_CLIPPY_ARGS = "--features nightly ${CARGO_MAKE_CLIPPY_ARGS}", CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN = "nightly" }

[tasks.post-nightly-clippy]
extend = "post-clippy"
env = { CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}" }

[tasks.nightly-docs]
extend = "docs"
toolchain = "nightly"
args = ["doc", "--no-deps", "--features", "nightly"]

[tasks.beta-test-flow]
extend = "test-flow"
dependencies = ["pre-beta-test", "beta-test", "post-beta-test"]

[tasks.pre-beta-test]
alias = "pre-test"

[tasks.beta-test]
extend = "test"
toolchain = "beta"

[tasks.post-beta-test]
alias = "post-test"

[tasks.beta-clippy-flow]
extend = "clippy-flow"
dependencies = ["pre-beta-clippy", "beta-clippy-router", "post-beta-clippy"]

[tasks.pre-beta-clippy]
extend = "pre-clippy"
# Proc-macro crates fail to trigger recompilation when switching toolchains due to bug in rustc resulting in "found invalid metadata files for crate" errors.
run_task = "clean"

[tasks.beta-clippy-router]
extend = "clippy-router"
env = { CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN = "beta" }

[tasks.post-beta-clippy]
extend = "post-clippy"
env = { CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN = "${CARGO_MAKE_RUST_DEFAULT_TOOLCHAIN}" }

[tasks.beta-docs]
extend = "docs"
toolchain = "beta"
